name: ðŸ§ª Parallel Coverage Tests

on:
  pull_request:

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          coverage: xdebug
          extensions: fileinfo

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: src

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: src/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer Dependencies
        run: |
          cd src
          composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Set environment to testing
        run: |
          cd src
          echo "ENV=testing" > .env

      - name: Prepare test directories
        run: |
          cp -R src unit_tests
          cp -R src feature_tests

      - name: Create custom output formatter
        run: |
          cat << EOF > formatter.sh
          #!/bin/bash
          unit_progress=""
          feature_progress=""

          update_progress() {
            local suite=\$1
            local result=\$2
            if [ "\$suite" = "unit" ]; then
              unit_progress+="\$result"
            else
              feature_progress+="\$result"
            fi
            echo -ne "\rUnit:    \$unit_progress"
            echo -ne "\nFeature: \$feature_progress"
            echo -ne "\033[1A"  # Move cursor up one line
          }

          while IFS= read -r line; do
            echo "\$line" >> "\$1_full_output.log"
            if [[ \$line == *"[x]"* ]]; then
              update_progress "\$1" "X"
            elif [[ \$line == *"[âœ“]"* ]]; then
              update_progress "\$1" "O"
            fi
          done

          echo  # Print a newline at the end
          EOF
          chmod +x formatter.sh

      - name: Execute Tests in Parallel
        run: |
          mkdir -p coverage
          # Start unit tests in the background
          (
            cd unit_tests
            vendor/bin/pest --coverage-php=../coverage/unit.cov --testsuite=UnitFramework 2>&1 | ../formatter.sh unit
          ) &
          
          # Start feature tests in the background
          (
            cd feature_tests
            vendor/bin/pest --coverage-php=../coverage/feature.cov --testsuite=FeatureHyde,FeatureFramework,Publications,"Realtime Compiler" 2>&1 | ../formatter.sh feature
          ) &
          
          # Wait for both background processes to finish
          wait

      - name: Print Unit Test Output
        if: always()
        run: cat unit_full_output.log

      - name: Print Feature Test Output
        if: always()
        run: cat feature_full_output.log

      - name: Download phpcov
        run: wget https://phar.phpunit.de/phpcov.phar

      - name: Merge coverage reports
        run: |
          php phpcov.phar merge --clover=coverage.xml coverage
          cp coverage.xml coverage/

      - name: "Publish coverage report to Codecov"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

      - name: Ping statistics server with test results
        run: |
          curl https://raw.githubusercontent.com/hydephp/develop/6e9d17f31879f4ccda13a3fec4029c9663bccec0/monorepo/scripts/ping-openanalytics-testrunner.php -o ping.php
          php ping.php "Monorepo Coverage Tests" ${{ secrets.OPENANALYTICS_TOKEN }} ${{ github.ref_name }}
