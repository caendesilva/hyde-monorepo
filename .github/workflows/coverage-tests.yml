name: ðŸ§ª Parallel Coverage Tests

on:
  pull_request:

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          coverage: xdebug
          extensions: fileinfo

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: src

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: src/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer Dependencies
        run: |
          cd src
          composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Set environment to testing
        run: |
          cd src
          echo "ENV=testing" > .env

      - name: Prepare test directories
        run: |
          cp -R src unit_tests
          cp -R src feature_tests

      - name: Execute Tests in Parallel
        run: |
          mkdir -p coverage
          # Create named pipes
          mkfifo unit_pipe feature_pipe
          
          # Function to run tests and signal completion
          run_tests() {
            local suite=$1
            local pipe=$2
            cd ${suite}_tests
            vendor/bin/pest --colors=always --coverage-php=../coverage/${suite}.cov --testsuite=$3 2>&1 | \
              sed -E "s/^/[${suite^^}] /"
            echo "done" > $pipe
          }
          
          # Start tests in background
          run_tests unit unit_pipe UnitFramework &
          run_tests feature feature_pipe "FeatureHyde,FeatureFramework,Publications,Realtime Compiler" &
          
          # Wait for both test suites to complete
          while true; do
            if [ -z "$(jobs -p)" ]; then
              break
            fi
            if read -r -t 1 line < unit_pipe; then
              [ "$line" = "done" ] && pkill -P $$ sed
            fi
            if read -r -t 1 line < feature_pipe; then
              [ "$line" = "done" ] && pkill -P $$ sed
            fi
          done
          
          # Clean up pipes
          rm unit_pipe feature_pipe

      - name: Download phpcov
        run: wget https://phar.phpunit.de/phpcov.phar

      - name: Merge coverage reports
        run: |
          php phpcov.phar merge --clover=coverage.xml coverage
          cp coverage.xml coverage/

      - name: Create fake JUnit XML
        run: |
          php -r '
          $coverage = simplexml_load_file("coverage.xml");
          $metrics = $coverage->project->metrics;
          
          $junit = new SimpleXMLElement("<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites></testsuites>");
          $testsuite = $junit->addChild("testsuite");
          $testsuite->addAttribute("name", "All Tests");
          $testsuite->addAttribute("tests", (string)$metrics["elements"]);
          $testsuite->addAttribute("assertions", (string)$metrics["coveredelements"]);
          $testsuite->addAttribute("errors", "0");
          $testsuite->addAttribute("warnings", "0");
          $testsuite->addAttribute("failures", (string)($metrics["elements"] - $metrics["coveredelements"]));
          $testsuite->addAttribute("skipped", "0");
          $testsuite->addAttribute("time", "0");
          
          $junit->asXML("report.xml");
          '

      - name: "Publish coverage report to Codecov"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

      - name: Ping statistics server with test results
        run: |
          curl https://raw.githubusercontent.com/hydephp/develop/6e9d17f31879f4ccda13a3fec4029c9663bccec0/monorepo/scripts/ping-openanalytics-testrunner.php -o ping.php
          php ping.php "Monorepo Coverage Tests" ${{ secrets.OPENANALYTICS_TOKEN }} ${{ github.ref_name }}
