name: Test Suite (Matrix)
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  # First run tests with coverage. If this fails, we don't need to run the matrix.
  test-coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: "8.0"
          coverage: xdebug
          extensions: fileinfo
      - name: Install Hyde
        run: git clone https://github.com/hydephp/hyde.git $(pwd)
      - name: Install Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
   
      - name: Set Framework version to dev-github.base_ref
        if: github.event_name != 'push'
        run: "composer require hyde/framework:dev-${{ github.base_ref }}"
      - name: Set Framework version to dev-master
        if: github.event_name == 'push'
        run: "composer require hyde/framework:dev-master"

      - name: Set environment to testing
        run: echo "ENV=testing" > .env
      - name: Output debug information
        run: php hyde debug
        
      - name: Run tests with output coverage reporting
        run: vendor/bin/pest --coverage --coverage-text=report.txt --colors=always --coverage-clover build/coverage/clover.xml --coverage-cobertura build/coverage/cobertura.xml --coverage-crap4j build/coverage/crap4j.xml --coverage-xml build/coverage/coverage-xml --log-junit build/junit.xml
        env:
          ENV: testing

      - name: Upload the report as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: "report.txt"
          path: "report.txt"
        
      - name: "Publish coverage report to Codecov"
        uses: codecov/codecov-action@v3
        with:
          #token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./build/coverage

  hyde-tests:
    needs: test-coverage
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: "8.0"
          extensions: fileinfo
      - name: Install Hyde
        run: git clone https://github.com/hydephp/hyde.git $(pwd)
      - name: Install Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Set Framework version to dev-github.base_ref
        if: github.event_name != 'push'
        run: "composer require hyde/framework:dev-${{ github.base_ref }}"
      - name: Set Framework version to dev-master
        if: github.event_name == 'push'
        run: "composer require hyde/framework:dev-master"
     
      - name: Set environment to testing
        run: echo "ENV=testing" > .env
      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        run: vendor/bin/pest
        env:
          ENV: testing

  update-coverage-badge:
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'push'

    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: "8.0"
          extensions: fileinfo

      - name: Download report
        uses: actions/download-artifact@v3
        with:
          name: report.txt

      - name: Download Coverage Parser
        run: "wget https://gist.githubusercontent.com/caendesilva/75a5ff8dd4e23921b75f503149655924/raw/456bd4bae423eda2a3ff2ba2ce8f8246f366d46f/parser.php"
      
      - name: Run the parser
        id: run-coverage-parser
        run: echo ::set-output name=average_coverage::$(php parser.php)
      - name: Output the value
        run: echo Result ${{ steps.run-coverage-parser.outputs.average_coverage }}
      - name: Post the result to server
        run: 'curl -X POST https://cdn.desilva.se/microservices/coverbadges/api.php -H "Content-Type: application/x-www-form-urlencoded" -d "repo=https://github.com/hydephp/hyde&value=${{ steps.run-coverage-parser.outputs.average_coverage }}&token=${{ secrets.COVERBADGES_SECRET }}"'

      - name: Download the SVG badge
        run: "wget https://cdn.desilva.se/microservices/coverbadges/badges/9b8f6a9a7a48a2df54e6751790bad8bd910015301e379f334d6ec74c4c3806d1.svg"

      - name: Upload the SVG badge as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: "badge.svg"
          path: "9b8f6a9a7a48a2df54e6751790bad8bd910015301e379f334d6ec74c4c3806d1.svg"

  purge-camo-content:
    runs-on: ubuntu-latest
    needs: update-coverage-badge
    if: github.event_name == 'push'
    steps: 
      - name: Download Purge Script
        run: "wget https://raw.githubusercontent.com/hydephp/developer-tools/46734ae87ec74ac27d7c81f18b58ec52362340f2/scripts/purge-camo-cache.php"
      
      - name: Run the script
        run: php purge-camo-cache.php 

  validate-composer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate composer.json and composer.lock
        run: composer validate --strict